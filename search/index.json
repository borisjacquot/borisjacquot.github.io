[{"content":"Les conteneurs Random things ps et pstree permettent de voir la liste des processus actifs sur la machine (package procps). Au démarrage le processus 1 sera toujours /init\n Dans le cas d\u0026rsquo;une machine virtuelle, l\u0026rsquo;information va être traitée une première fois par la VM, puis est réinterprêtée par le noyau. (On peut skip ceci et gagner du temps avec VT-x)\n Un conteneur =/= une VM\nLes Namespaces   Processus : Les prcessus dans le NS vont être isolés des autres. À l\u0026rsquo;intérieur du NS, le premier processus aura donc l\u0026rsquo;ID 1 (cf /init). Du point de vue du noyau, ce processus aura un autre ID qui lui est propre. Il est impossible, à l\u0026rsquo;intérieur du NS, de voir les autres processus de la machine. Cependant, l\u0026rsquo;inverse est vrai. (cf pstree dans chaque)\n  Réseau : On peut créer une interface virtuelle qui sera alors connectée (ou non) à une interface de la machine (via un bridge par exemple).\n  User / group : Les utilisateurs dans un NS peuvent avoir le même ID que ceux de la machine. Il peut donc y avoir des faille (par exemple : avoir l\u0026rsquo;ID 0 dans le NS donne les droits du l\u0026rsquo;ID 0 de la machine = root). Pour y remédier, on utilise l\u0026rsquo;UID shifting =\u0026gt; càd on va dire que tous les UID seront +4000 (par exemple) par rapport à ceux de la machine, donc plus sécurisant.\n  Docker  Un ensemble de NS crée un conteneur. On le crée grâce à un clone() (fork ou thread).\n Docker va simplifier la création de conteneurs en s\u0026rsquo;occupant de créer tous les NS. On peut choisir ce qu\u0026rsquo;on met dedans grâce à une image.\nPar exemple : pour un site web static qui tourne sous nginx, on va procéder de la sorte :\n On va créer un fichier Dockerfile avec toutes les instructions pour installer le conteneur (comment build l\u0026rsquo;image). Dans notre cas on pourra écrire dedans :  # on dl l'image que l'on souhaite =\u0026gt; ici nginx qui tourne sur alpine (une distro avec le minimum légal pour que ce soit léger) FROM nginx:alpine # on lance des commandes pour le build RUN apt update \u0026amp;\u0026amp; apt install [...] # on copie notre index (par exemple) COPY ./docker/base/fpm/resources/index.html /usr/local/nginx/html # on copie notre script qui sera le proc 1 selon ce qu'on veut COPY ./docker/base/fpm/resources/index.html /entrypoint # on défini un user pour exécuter les choses =\u0026gt; on donne peu de droits pour éviter les failles USER www-data # on choisi l'espace de travail WORKDIR \u0026quot;/application\u0026quot; # on choisi notre point d'entrée (donc le proc 0) ENTRYPOINT [\u0026quot;/entrypoint\u0026quot;]  Ensuite on peut lancer :  $ docker build -t my-image:v0.1 . et hop!\n","date":"2021-05-22T00:00:00Z","image":"https://borisjacquot.github.io/p/les-conteneurs/conteneurs_hu3d03a01dcc18bc5be0e67db3d8d209a6_3399148_120x120_fill_q75_box_smart1.jpg","permalink":"https://borisjacquot.github.io/p/les-conteneurs/","title":"Les conteneurs"}]